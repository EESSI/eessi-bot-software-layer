#!/bin/bash
#
# This file is part of the EESSI infrastructure,
# see https://github.com/EESSI/infrastructure
#
# author: Bob Droege (@bedroge)
# author: Terje Kvernes (@terjekv)
# author: Thomas Roeblitz (@trz42)
#
# license: GPLv2
#

function upload_to_staging_bucket
{
  _file=$1
  _bucket=$2
  _path=$3
  _endpoint_url=$4

  _options=
  if [[ ! -z "${_endpoint_url}" ]]; then
    _options="--endpoint-url ${_endpoint_url}"
  fi
  aws ${_options} s3 cp "${_file}" s3://${_bucket}/${_path}
}

# This needs expanding etc.
function check_file_name
{
  filename=$1
  if ( echo ${filename} | grep ^eessi > /dev/null &&
    echo ${filename} | grep -E '(compat|init|software)' > /dev/null ); then
    return 0
  else
    return 1
  fi
}

function create_metadata_file
{
  _artefact=$1
  _url=$2
  _repository=$3
  _pull_request_number=$4
  _pull_request_comment_id=$5
  _action=$6
  _order=$7
  _mode=$8

  _tmpfile=$(mktemp)

  # Define the base JSON structure without the task section
  local base_json='{
    uploader: {username: $un, ip: $ip, hostname: $hn},
    payload: {filename: $fn, size: $sz, ctime: $ct, sha256sum: $sha256, url: $url},
    link2pr: {repo: $repo, pr: $pr, pr_comment_id: $pr_comment_id}
  }'

  # Only add the task section if an action is provided
  if [[ ! -z "${_action}" ]]; then
    # Determine the mode:
    # 1. If mode is NOT explicitly provided (is empty):
    #    a. Use "order" mode if an order value is provided
    #    b. Use "timestamp" mode if no order value is provided
    # 2. If mode IS explicitly provided, we'll use that value (handled implicitly by not changing it)
    if [[ -z "${_mode}" ]]; then
      if [[ ! -z "${_order}" ]]; then
        _mode="order"  # Default when order is provided but mode isn't
      else
        _mode="timestamp"  # Default when neither order nor mode is provided
      fi
    fi

    # If mode is "order" but no order is provided, create a default order
    if [[ -z "${_order}" && "${_mode}" == "order" ]]; then
      # Get timestamp from the artefact file instead of current time
      # This is consistent with how ctime is obtained for the payload section
      local file_date=$(date -r "${_artefact}" +%s)

      # Create a default order based on action type and file timestamp
      case "${_action}" in
        "start")
          _order=$((0x2000000000000000 | file_date))
          ;;
        "delete")
          _order=$((0x4000000000000000 | file_date))
          ;;
        "add")
          _order=$((0x7000000000000000 | file_date))
          ;;
        "update")
          _order=$((0xB000000000000000 | file_date))
          ;;
        "end")
          _order=$((0xD000000000000000 | file_date))
          ;;
        *)
          # For unknown actions, default to "add" priority
          _order=$((0x7000000000000000 | file_date))
          ;;
      esac
    fi

    # Add the task section to the JSON
    base_json='{
      uploader: {username: $un, ip: $ip, hostname: $hn},
      payload: {filename: $fn, size: $sz, ctime: $ct, sha256sum: $sha256, url: $url},
      link2pr: {repo: $repo, pr: $pr, pr_comment_id: $pr_comment_id},
      task: {action: $action, order: $order, mode: $mode}
    }'
  fi

  # Generate the JSON with jq
  # Only include action, order, and mode args when action is provided
  if [[ ! -z "${_action}" ]]; then
    jq -n \
      --arg un $(whoami) \
      --arg ip $(curl -s https://checkip.amazonaws.com) \
      --arg hn "$(hostname -f)" \
      --arg fn "$(basename ${_artefact})" \
      --arg sz "$(du -b "${_artefact}" | awk '{print $1}')" \
      --arg ct "$(date -r "${_artefact}")" \
      --arg sha256 "$(sha256sum "${_artefact}" | awk '{print $1}')" \
      --arg url "${_url}" \
      --arg repo "${_repository}" \
      --arg pr "${_pull_request_number}" \
      --arg pr_comment_id "${_pull_request_comment_id}" \
      --arg action "${_action}" \
      --arg order "${_order}" \
      --arg mode "${_mode}" \
      "${base_json}" > "${_tmpfile}"
  else
    jq -n \
      --arg un $(whoami) \
      --arg ip $(curl -s https://checkip.amazonaws.com) \
      --arg hn "$(hostname -f)" \
      --arg fn "$(basename ${_artefact})" \
      --arg sz "$(du -b "${_artefact}" | awk '{print $1}')" \
      --arg ct "$(date -r "${_artefact}")" \
      --arg sha256 "$(sha256sum "${_artefact}" | awk '{print $1}')" \
      --arg url "${_url}" \
      --arg repo "${_repository}" \
      --arg pr "${_pull_request_number}" \
      --arg pr_comment_id "${_pull_request_comment_id}" \
      "${base_json}" > "${_tmpfile}"
  fi

  echo "${_tmpfile}"
}

function display_help
{
  echo "Usage: $0 [OPTIONS] <filenames>"                                           >&2
  echo "  -a | --artefact-prefix PREFIX  -  a directory to which the artefact"     >&2
  echo "                                    shall be uploaded; BASH variable"      >&2
  echo "                                    expansion will be applied; arg '-l'"   >&2
  echo "                                    lists variables that are defined at"   >&2
  echo "                                    the time of expansion"                 >&2
  echo "  -A | --action ACTION           -  specify the action type (add, delete," >&2
  echo "                                    update); used for task ordering"       >&2
  echo "  -b | --bot-instance NAME       -  name of the bot instance that uploads" >&2
  echo "                                    files to S3"                           >&2
  echo "  -e | --endpoint-url URL        -  endpoint url (needed for non AWS S3)"  >&2
  echo "  -h | --help                    -  display this usage information"        >&2
  echo "  -i | --pr-comment-id           -  identifier of a PR comment; may be"    >&2
  echo "                                    used to efficiently determine the PR"  >&2
  echo "                                    comment to be updated during the"      >&2
  echo "                                    ingestion procedure"                   >&2
  echo "  -l | --list-variables          -  list variables that are available"     >&2
  echo "                                    for expansion"                         >&2
  echo "  -k | --sign-key SCRIPT_KEY     -  specify location of the key to be"     >&2
  echo "                                    used to sign artefacts and metadata"   >&2
  echo "                                    files [optional; default: don't sign]" >&2
  echo "  -m | --metadata-prefix PREFIX  -  a directory to which the metadata"     >&2
  echo "                                    file shall be uploaded; BASH variable" >&2
  echo "                                    expansion will be applied; arg '-l'"   >&2
  echo "                                    lists variables that are defined at"   >&2
  echo "                                    the time of expansion"                 >&2
  echo "  -M | --mode MODE               -  specify ordering mode (order,"         >&2
  echo "                                    timestamp) for task processing"        >&2
  echo "  -n | --bucket-name BUCKET      -  bucket name (same as BUCKET above)"    >&2
  echo "  -O | --order ORDER             -  specify the order value for task"      >&2
  echo "                                    prioritization"                        >&2
  echo "  -p | --pull-request-number INT -  a pull request number (INT); used to"  >&2
  echo "                                    link the upload to a PR"               >&2
  echo "  -r | --repository FULL_NAME    -  a repository name ACCOUNT/REPONAME;"   >&2
  echo "                                    used to link the upload to a PR"       >&2
  echo "  -s | --sign-script SCRIPT_PATH -  path to script that is used to sign"   >&2
  echo "                                    artefacts and metadata files. The"     >&2
  echo "                                    script is called with two arguments:"  >&2
  echo "                                    KEY file_to_sign. The KEY is the one"  >&2
  echo "                                    provided via option --sign-key. The"   >&2
  echo "                                    latter is determined by this script."  >&2
  echo "                                    [optional; default: don't sign]"       >&2
}

if [[ $# -lt 1 ]]; then
    display_help
    exit 1
fi


# process command line args
POSITIONAL_ARGS=()

# depends on which service hosts the bucket
#   minio: https://MINIO_SERVER:MINIO_PORT/{bucket_name}/
#   s3aws: https://{bucket_name}.s3.amazonaws.com/
# should be contructable from endpoint_url and bucket_name
bucket_base=

# default bucket is eessi-staging
bucket_name="eessi-staging"

# provided via options in the bot's config file app.cfg
endpoint_url=

# provided via command line arguments
pr_comment_id="none"
pull_request_number="none"
github_repository="EESSI/software-layer"
sign_key=
sign_script=

# provided via options in the bot's config file app.cfg and/or command line argument
bot_instance=
metadata_prefix=
artefact_prefix=

# task section parameters
action=""  # No default action - must be explicitly specified
order=""   # No default order value
mode=""    # No default mode

# other variables
legacy_aws_path=
variables="github_repository legacy_aws_path pull_request_number"

while [[ $# -gt 0 ]]; do
  case $1 in
    -a|--artefact-prefix)
      artefact_prefix="$2"
      shift 2
      ;;
    -A|--action)
      action="$2"
      shift 2
      ;;
    -b|--bot-instance)
      bot_instance="$2"
      shift 2
      ;;
    -e|--endpoint-url)
      endpoint_url="$2"
      shift 2
      ;;
    -h|--help)
      display_help
      exit 0
      ;;
    -l|--list-variables)
      echo "variables that will be expanded: name (default value)"
      for var in ${variables}
      do
        echo "    ${var} (${!var:-unset})"
      done
      exit 0
      ;;
    -i|--pr-comment-id)
      pr_comment_id="$2"
      shift 2
      ;;
    -k|--sign-key)
      sign_key=$2
      if [[ ! -r "${sign_key}" ]]; then
        echo "Error: SSH key '${sign_key}' to be used for signing doesn't exist or cannot be read" >&2
        exit 1
      fi
      shift 2
      ;;
    -m|--metadata-prefix)
      metadata_prefix="$2"
      shift 2
      ;;
    -M|--mode)
      mode="$2"
      shift 2
      ;;
    -n|--bucket-name)
      bucket_name="$2"
      shift 2
      ;;
    -O|--order)
      order="$2"
      shift 2
      ;;
    -p|--pull-request-number)
      pull_request_number="$2"
      shift 2
      ;;
    -r|--repository)
      github_repository="$2"
      shift 2
      ;;
    -s|--sign-script)
      sign_script=$2
      if [[ ! -x "${sign_script}" ]]; then
        echo "Error: Script '${sign_script}' to be used for signing doesn't exist or is not executable" >&2
        exit 1
      fi
      shift 2
      ;;
    -*|--*)
      echo "Error: Unknown option: $1" >&2
      exit 1
      ;;
    *)  # No more options
      POSITIONAL_ARGS+=("$1") # save positional arg
      shift
      ;;
  esac
done

# restore potentially parsed filename(s) into $*
set -- "${POSITIONAL_ARGS[@]}"

# ensure that either none or both of $sign_key and $sign_script are defined
if [[ -n "${sign_key}" ]] && [[ -n "${sign_script}" ]]; then
  sign=yes
elif [[ -n "${sign_key}" ]]; then
  sign=no
  echo "Error: Signing requires a key (${sign_key}) AND a script (${sign_script}); likely the bot config is incomplete" >&2
  exit 1
elif [[ -n "${sign_script}" ]]; then
  sign=no
  echo "Error: Signing requires a key (${sign_key}) AND a script (${sign_script}); likely the bot config is incomplete" >&2
  exit 1
else
  sign=no
fi

# infer bucket_base:
#   if endpoint_url is not set (assume AWS S3 is used),
#     bucket_base=https://${bucket_name}.s3.amazonaws.com/
#   if endpoint_url is set (assume non AWS S3, eg minio, is used),
#     bucket_base=${endpoint_url}/${bucket_name}/
# check if endpoint_url is not set
if [[ -z "${endpoint_url}" ]]; then
  # assume AWS S3 being used
  bucket_base=https://${bucket_name}.s3.amazonaws.com
else
  # assume non AWS S3 being used or AWS S3 with bucket not in DNS
  bucket_base=${endpoint_url}/${bucket_name}
fi

for file in "$@"; do
  if [[ -r "${file}" && -f "${file}" &&  -s "${file}" ]]; then
    basefile=$( basename ${file} )
    if check_file_name ${basefile}; then
      if tar tf "${file}" | head -n1 > /dev/null; then
        # 'legacy_aws_path' might be used in artefact_prefix or metadata_prefix
        # its purpose is to support the old/legacy method to derive the location
        # where to store the artefact and metadata file
        export legacy_aws_path=$(basename ${file} | tr -s '-' '/' \
                 | perl -pe 's/^eessi.//;' | perl -pe 's/\.tar\.gz$//;' )
        if [ -z ${artefact_prefix} ]; then
          aws_path=${legacy_aws_path}
        else
          export pull_request_number
          export github_repository
          aws_path=$(envsubst <<< "${artefact_prefix}")
        fi
        aws_file=$(basename ${file})
        # 1st sign artefact, and upload signature
        if [[ "${sign}" = "yes" ]]; then
          sig_file=${file}.sig
          # delete sig file if it already exists
          if [[ -f "${sig_file}" ]]; then
            rm -f ${sig_file}
            echo "INFO: removed existing signature file (${sig_file})"
          fi
          # sign artefact
          ${sign_script} --sign --private-key ${sign_key} --file ${file} --namespace ${bot_instance}
          # TODO check if signing worked (just check exit code == 0)
          aws_sig_file=${aws_file}.sig

          # uploading signature
          echo "  store artefact signature at ${aws_path}/${aws_sig_file}"
          upload_to_staging_bucket \
                  "${sig_file}" \
                  "${bucket_name}" \
                  "${aws_path}/${aws_sig_file}" \
                  "${endpoint_url}"
        else
          echo "no signing method defined; not signing artefact"
        fi

        echo Uploading to "${url}"
        echo "  store artefact at ${aws_path}/${aws_file}"
        upload_to_staging_bucket \
                "${file}" \
                "${bucket_name}" \
                "${aws_path}/${aws_file}" \
                "${endpoint_url}"

        echo "Creating metadata file"
        url="${bucket_base}/${aws_path}/${aws_file}"
        echo "create_metadata_file file=${file} \
                                   url=${url} \
                                   github_repository=${github_repository} \
                                   pull_request_number=${pull_request_number} \
                                   pr_comment_id=${pr_comment_id} \
                                   action=${action} \
                                   order=${order} \
                                   mode=${mode}"
        metadata_file=$(create_metadata_file "${file}" \
                                             "${url}" \
                                             "${github_repository}" \
                                             "${pull_request_number}" \
                                             "${pr_comment_id}" \
                                             "${action}" \
                                             "${order}" \
                                             "${mode}")
        aws_metadata_file=${aws_file}.meta.txt
        # TODO check that creating the metadata file succeeded
        echo "metadata:"
        cat ${metadata_file}

        if [ -z ${metadata_prefix} ]; then
          aws_path=${legacy_aws_path}
        else
          export pull_request_number
          export github_repository
          aws_path=$(envsubst <<< "${metadata_prefix}")
        fi
        # 2nd sign metadata file, and upload signature
        if [[ "${sign}" = "yes" ]]; then
          sig_metadata_file=${metadata_file}.sig
          # delete sig file if it already exists
          if [[ -f "${sig_metadata_file}" ]]; then
            rm -f ${sig_metadata_file}
            echo "INFO: removed existing signature file (${sig_metadata_file})"
          fi
          # sign metadata file
          ${sign_script} --sign --private-key ${sign_key} --file ${metadata_file} --namespace ${bot_instance}
          # TODO check if signing worked (just check exit code == 0)
          aws_sig_metadata_file=${aws_metadata_file}.sig

          echo "  store metadata signature at ${aws_path}/${aws_sig_metadata_file}"
          upload_to_staging_bucket \
                  "${sig_metadata_file}" \
                  "${bucket_name}" \
                  "${aws_path}/${aws_sig_metadata_file}" \
                  "${endpoint_url}"
        else
          echo "no signing method defined; not signing metadata file"
        fi
        echo "  store metadata file at ${aws_path}/${aws_file}.meta.txt"
        upload_to_staging_bucket \
                "${metadata_file}" \
                "${bucket_name}" \
                "${aws_path}/${aws_file}.meta.txt" \
                "${endpoint_url}"
      else
        echo "'${file}' is not a tar file."
        exit 1
      fi
    else
      echo "${file} does not look like an eessi layer filename!"
      exit 1
    fi
  else
      echo "'${file}' is not a readable non zero-sized file."
      exit 1
  fi
done
